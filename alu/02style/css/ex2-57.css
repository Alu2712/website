@charset "utf-8";

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    /* outline: 1px solid red; */
    /* border: 1px solid red; */
}
body { background: url(/02style/img/bg_grid.png); }
p {
    width: 600px; height: 100px;
    padding: 30px;
    margin-bottom: 10px;
    background: rgba(255, 255, 0, 0.5);
    border: 10px solid rgba(0, 0, 0, 0.5);
    /* border와 padding은 객체 안쪽으로 생기는것이며,  box-sizing: content-box;(기본값)일 경우 width/height를 늘리는 요소이다. */
}
.sizing {
    box-sizing: border-box;
    /* box-sizing: content-box; */
    padding: 0px;
    /* box-sizing: border-box;일 경우에 물리적 한계점까지 안쪽으로 padding이 먹어들어가는데, 그 이상일 경우엔 반대쪽을 밀고나와 width/height가 커진다. */
}


.sizing_list {
    width: 700px;
    margin-top: 20px;
}
.sizing_list li {
    /* box-sizing: border-box; */
    list-style-type: none;
    float: left;
    /* block요소에서 사용하는 정렬방법 float */
    width: 25%;
    padding: 10px;
    text-align: center;
    background: rgba(0, 0, 100, 0.3);
}
/* 부모객체를 자식이 동비율로 분할하여 width를 설정해야한다면, 요소에 box-sizing: border-box;로 선언이 되어있어야 가능하다. */




.sizing_list li:nth-child(even) {
    /* 짝수 자식들 */
    background: rgba(0, 0, 100, 0.15);
}
.sizing_list li a {
    text-decoration: none;
    color: #000;
}
.sizing_list li a:hover {
    text-decoration: underline;
}